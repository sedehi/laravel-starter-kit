<?php

namespace App\Modules\User\Models;

use App\Modules\Role\Models\PermissionRoute;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Sedehi\Filterable\Filterable;
use Spatie\Permission\Traits\HasRoles;

class Admin extends Authenticatable
{
    use SoftDeletes,Filterable,HasRoles;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'first_name',
        'last_name',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $filterable = [
        'first_name' => [
            'operator' => 'LIKE',
        ],
        'email',
    ];

    public function getFullNameAttribute()
    {
        return $this->first_name.' '.$this->last_name;
    }

    private function loadAllPermissionRoutes()
    {
        return cache()
            ->tags(PermissionRoute::$cacheTags)
            ->remember(config('permission.cache.key').'_routes_'.$this->id, config('permission.cache.expiration_time'), function () {
            return $this->loadMissing('roles.permissions.routes')
                ->roles->flatMap(function ($role) {
                    return $role->permissions->flatMap(function ($permission) {
                        return $permission->routes->pluck('name');
                    });
                })->unique();
            });
    }

    /**
     * @param $routes
     * @return bool
     */
    public function hasRoute($routes):bool
    {
        return $this->loadAllPermissionRoutes()->intersect((array) $routes)->count();
    }
}
